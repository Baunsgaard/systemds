#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# create federated matrix
N = 1000000; 
M = 40;
data = federated(type="frame",
    addresses=list("localhost:8001/./data/criteo_day21_1M_cleaned",
                   "localhost:8002/./data/criteo_day21_1M_cleaned",
                   "localhost:8003/./data/criteo_day21_1M_cleaned"),
    ranges=   list(list(0,0),list(N/3,M),
                   list(N/3,0),list((N/3)*2,M),
                   list((N/3)*2,0),list(N, M))
)

# transform encode
jspec1 = read("code/exp/criteo_spec1.json", data_type="scalar", value_type="string");
[X0, M] = transformencode(target=data, spec=jspec1);


y = X0[,1] + 1; 

# print(toString(unique(y)))

X = X0[,2:ncol(X0)]
B = multiLogReg(X=X, Y=y, icpt=2, maxi=2, verbose=TRUE);

# Predicting
[m, pred, acc] = multiLogRegPredict(X=X, B=B, Y=y, verbose=TRUE)

# dim = max(max(y),max(pred))

# print(toString(unique(y)))

# print(toString(unique(pred)))

# a = table(pred, dim)

# print(toString(a))
# b = table(y, dim)
# print(toString(b))

# confusionSum = table(pred, y,  dim, dim)


# print(toString(confusionSum))
# print(toString(colSums(y)))
[co, avg] = confusionMatrix(P=pred, Y=y)

# print(toString(colSums(avg)))
print(toString(avg))
